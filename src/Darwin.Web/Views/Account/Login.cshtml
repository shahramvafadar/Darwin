@{
    ViewData["Title"] = "Login";
    var returnUrl = (string?)ViewData["ReturnUrl"] ?? "";
}
<h1>Login</h1>
<partial name="~/Areas/Admin/Views/Shared/_Alerts.cshtml" />
<form asp-action="LoginPost" asp-controller="Account" method="post">
    <input type="hidden" name="returnUrl" value="@returnUrl" />
    <div class="mb-3">
        <label for="email">Email</label>
        <input id="email" name="email" type="email" class="form-control" required />
        <field-help for="email" text="Your account email." />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <input id="password" name="password" type="password" class="form-control" required />
        <field-help for="password" text="Use your strong password." />
    </div>
    <div class="form-check mb-3">
        <input id="rememberMe" name="rememberMe" type="checkbox" class="form-check-input" />
        <label for="rememberMe" class="form-check-label">Remember me</label>
    </div>
    <button class="btn btn-primary" type="submit">Sign in</button>
    @Html.AntiForgeryToken()
</form>

<hr />

<!-- Passkey login -->
<form id="passkey-form" method="post" action="/account/webauthn/finish-login">
    <input type="hidden" name="challengeTokenId" id="challengeTokenId" />
    <input type="hidden" name="assertionResponseJson" id="assertionResponseJson" />
    <input type="hidden" name="rememberMe" value="true" />
    <input type="hidden" name="returnUrl" value="@returnUrl" />
    @Html.AntiForgeryToken()
</form>

<button id="passkey-btn" class="btn btn-secondary mt-2" type="button">Sign in with Passkey</button>

<script>
    document.getElementById('passkey-btn').addEventListener('click', async () => {
        // Ask user for email to scope allowed credentials if your server needs it (optional).
        const emailInput = document.getElementById('email');
        if (!emailInput || !emailInput.value) {
            alert('Enter your email first to use passkey login.');
            return;
        }
        // Begin
        const beginForm = new FormData();
        beginForm.set('userId', '00000000-0000-0000-0000-000000000000'); // Optional: if you require user id; else server can discover by email
        beginForm.append('__RequestVerificationToken', document.querySelector("input[name='__RequestVerificationToken']").value);
        const beginRes = await fetch('/account/webauthn/begin-login', { method: 'POST', body: beginForm });
        const beginJson = await beginRes.json();
        if (beginJson.error) { alert(beginJson.error); return; }

        document.getElementById('challengeTokenId').value = beginJson.challengeTokenId;

        const options = JSON.parse(beginJson.options);
        options.publicKey.challenge = Uint8Array.from(atob(options.publicKey.challenge), c => c.charCodeAt(0));

        const assertion = await navigator.credentials.get(options);
        // Convert to JSON your server expects:
        const clientResponse = {
            id: assertion.id,
            rawId: btoa(String.fromCharCode(...new Uint8Array(assertion.rawId))),
            type: assertion.type,
            response: {
                clientDataJSON: btoa(String.fromCharCode(...new Uint8Array(assertion.response.clientDataJSON))),
                authenticatorData: btoa(String.fromCharCode(...new Uint8Array(assertion.response.authenticatorData))),
                signature: btoa(String.fromCharCode(...new Uint8Array(assertion.response.signature))),
                userHandle: assertion.response.userHandle ? btoa(String.fromCharCode(...new Uint8Array(assertion.response.userHandle))) : null
            }
        };
        document.getElementById('assertionResponseJson').value = JSON.stringify(clientResponse);
        document.getElementById('passkey-form').submit();
    });
</script>
